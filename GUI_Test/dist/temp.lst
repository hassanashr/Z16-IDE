Line   Address   Machine Code    Source
-----------------------------------------------------
   1                          # Z16 Advanced Test File
   2                          # Tests control structures, addressing modes, and edge cases
   3                          
   4                          .text
   5   0x0000                  .org 0
   6   0x0000                  main:
   7   0x0000                      # Initialize registers with test values
   8   0x0000   0239             li t0, 1          # Constant 1 for increments/decrements
   9   0x0002   80F9             li s0, 64         # Base memory address
  10   0x0004   0F79             li t1, 7          # Test value
  11   0x0006                      
  12   0x0006                      # Setup a simple array in memory
  13   0x0006   15B9             li a0, 10
  14   0x0008   0CCB             sw a0, 0(s0)      # mem[64] = 10
  15   0x000A   29B9             li a0, 20
  16   0x000C   2CCB             sw a0, 2(s0)      # mem[66] = 20
  17   0x000E   3DB9             li a0, 30
  18   0x0010   4CCB             sw a0, 4(s0)      # mem[68] = 30
  19   0x0012   51B9             li a0, 40
  20   0x0014   6CCB             sw a0, 6(s0)      # mem[70] = 40
  21   0x0016   65B9             li a0, 50
  22   0x0018   8CCB             sw a0, 8(s0)      # mem[72] = 50
  23   0x001A                      
  24   0x001A                      # Test nested control structures - find max value
  25   0x001A   078C             lw a0, 0(s0)      # Load first element into a0 (current max)
  26   0x001C   0539             li s1, 2          # Initialize offset
  27   0x001E   11F9             li a1, 8          # End offset
  28   0x0020                      
  29   0x0020                  find_max_loop:
  30   0x0020   074C             lw t1, 0(s0)      # Load mem[base+0]
  31   0x0022   08C0             add s0, s1        # Increment base address by 2
  32   0x0024                      
  33   0x0024                      # Compare current value with max
  34   0x0024   1D40             sub t1, a0        # t1 = t1 - a0
  35   0x0026   2162             blt t1, t0, skip_update  # If t1 < 0, don't update max
  36   0x0028   0B80             add a0, t1        # Update max: a0 = a0 + (t1 - a0) = t1
  37   0x002A                      
  38   0x002A                  skip_update:
  39   0x002A   0900             add s1, s1        # s1 = s1 + s1 (double the offset)
  40   0x002C   AF22             blt s1, a1, find_max_loop  # Continue if offset < 8
  41   0x002E                      
  42   0x002E                      # Print the max value found
  43   0x002E   0047             ecall 1           # Print max value
  44   0x0030                      
  45   0x0030                      # Test conditional forward and backward jumps
  46   0x0030   0139             li s1, 0          # Initialize sum
  47   0x0032   0B79             li t1, 5          # Limit
  48   0x0034                      
  49   0x0034                  count_up:
  50   0x0034   0100             add s1, t0        # s1 = s1 + 1
  51   0x0036   2B02             beq s1, t1, exit_up  # If s1 == 5, exit loop
  52   0x0038   7E35             j count_up
  53   0x003A                      
  54   0x003A                  exit_up:
  55   0x003A   09B8             mv a0, s1         # a0 = s1 = 5
  56   0x003C   0047             ecall 1           # Print 5
  57   0x003E                      
  58   0x003E                      # Test backward jumping
  59   0x003E   1539             li s1, 10         # Start value
  60   0x0040                      
  61   0x0040                  count_down:
  62   0x0040   1100             sub s1, t0        # s1 = s1 - 1
  63   0x0042   09B8             mv a0, s1         # a0 = s1
  64   0x0044   0047             ecall 1           # Print current value
  65   0x0046   D11A             bnz s1, count_down  # If s1 != 0, continue loop
  66   0x0048                      
  67   0x0048                      # Test stack operations
  68   0x0048   90B9             li sp, 200        # Initialize stack pointer
  69   0x004A   33B9             li a0, 25         # Value to save
  70   0x004C   0C8B             sw a0, 0(sp)      # Push onto stack
  71   0x004E   01B9             li a0, 0          # Clear a0
  72   0x0050   058C             lw a0, 0(sp)      # Pop from stack
  73   0x0052   0047             ecall 1           # Print 25
  74   0x0054                      
  75   0x0054                      # Call recursive function to calculate factorial
  76   0x0054   09B9             li a0, 4          # Calculate factorial of 4
  77   0x0056   806D             jal ra, factorial
  78   0x0058   0047             ecall 1           # Print result (should be 24)
  79   0x005A                      
  80   0x005A                      # Final success indicator
  81   0x005A   C7B9             li a0, 99
  82   0x005C   0047             ecall 1           # Print 99 (success)
  83   0x005E   00C7             ecall 3           # Terminate program
  84   0x0060                      
  85   0x0060                  # Recursive factorial function - iterative implementation
  86   0x0060                  # Input: a0 = n
  87   0x0060                  # Output: a0 = n!
  88   0x0060                  factorial:
  89   0x0060                      # Save return address
  90   0x0060   1080             sub sp, t0        # Decrement stack pointer by 2
  91   0x0062   1080             sub sp, t0
  92   0x0064   028B             sw ra, 0(sp)      # Save return address
  93   0x0066                      
  94   0x0066                      # Base case: if n <= 1, return 1
  95   0x0066   0379             li t1, 1
  96   0x0068   3B82             beq a0, t1, fact_base  # If a0 == 1, return 1
  97   0x006A   2BA2             blt a0, t1, fact_base  # If a0 < 1, return 1
  98   0x006C   001D             j factorial_recur      # Otherwise, do recursion
  99   0x006E                      
 100   0x006E                  fact_base:
 101   0x006E   03B9             li a0, 1          # Return 1
 102   0x0070   0235             j factorial_return
 103   0x0072                      
 104   0x0072                  factorial_recur:
 105   0x0072                      # Save n
 106   0x0072   1080             sub sp, t0        # Decrement stack pointer
 107   0x0074   1080             sub sp, t0
 108   0x0076   0C8B             sw a0, 0(sp)      # Save n
 109   0x0078                      
 110   0x0078                      # Calculate (n-1)!
 111   0x0078   1180             sub a0, t0        # a0 = n - 1
 112   0x007A   FC5D             jal ra, factorial  # Call factorial(n-1)
 113   0x007C                      
 114   0x007C                      # Multiply n * factorial(n-1) using repeated addition
 115   0x007C   054C             lw t1, 0(sp)      # Load saved n
 116   0x007E   0DF8             mv a1, a0         # Save factorial(n-1) in a1
 117   0x0080   01B9             li a0, 0          # Initialize result
 118   0x0082                      
 119   0x0082                  mul_loop:
 120   0x0082   0F80             add a0, a1        # a0 = a0 + a1
 121   0x0084   1140             sub t1, t0        # t1 = t1 - 1
 122   0x0086   E15A             bnz t1, mul_loop  # Continue if t1 != 0
 123   0x0088                      
 124   0x0088                      # Clean up this stack frame
 125   0x0088   0080             add sp, t0        # Restore stack pointer
 126   0x008A   0080             add sp, t0
 127   0x008C                      
 128   0x008C                  factorial_return:
 129   0x008C                      # Restore return address and return
 130   0x008C   044C             lw ra, 0(sp)      # Restore return address
 131   0x008E   0080             add sp, t0        # Restore stack pointer
 132   0x0090   0080             add sp, t0
 133   0x0092   4240             jr ra             # Return